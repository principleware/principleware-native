{"version":3,"file":"principleware-native.umd.min.js","sources":["../../node_modules/principleware-fe-utilities/out-tsc/lib/src/promise/promise-like.ts","../../node_modules/principleware-fe-utilities/out-tsc/lib/src/promise/monadic-operations.ts","../../node_modules/principleware-fe-utilities/out-tsc/lib/src/typing/type-checker.ts","../../node_modules/principleware-fe-utilities/out-tsc/lib/src/tools/str.ts","../../out-tsc/lib/src/storage/sqlite-database.ts","../../out-tsc/lib/src/storage/map-table.ts"],"sourcesContent":["\n/**\n * @param {?} fn\n * @return {?}\n */\nfunction asap(fn) {\n    setTimeout(fn, 1);\n}\n/**\n * @param {?} fn\n * @param {?} thisArg\n * @return {?}\n */\nfunction bind(fn, thisArg) {\n    return function() {\n        fn.apply(thisArg, arguments);\n    };\n}\n\nvar /** @type {?} */ isArray = Array.isArray || function(value) { return Object.prototype.toString.call(value) === \"[object Array]\"; };\n/**\n * Take a potentially misbehaving resolver function and make sure\n * onFulfilled and onRejected are only called once.\n * \n * Makes no guarantees about asynchrony.\n * @param {?} fn\n * @param {?} onFulfilled\n * @param {?} onRejected\n * @return {?}\n */\nfunction doResolve(fn, onFulfilled, onRejected) {\n    var /** @type {?} */ done = false;\n    try {\n        fn(function(value) {\n            if (done) {\n                return;\n            }\n            done = true;\n            onFulfilled(value);\n        }, function(reason) {\n            if (done) {\n                return;\n            }\n            done = true;\n            onRejected(reason);\n        });\n    } catch ( /** @type {?} */ex) {\n        if (done) {\n            return;\n        }\n        done = true;\n        onRejected(ex);\n    }\n}\n/**\n * @param {?} deferred\n * @return {?}\n */\nfunction handle(deferred) {\n    var /** @type {?} */ me = this;\n    if (this._state === null) {\n        this._deferreds.push(deferred);\n        return;\n    }\n    asap(function() {\n        var /** @type {?} */ cb, /** @type {?} */ ret;\n        cb = me._state ? deferred.onFulfilled : deferred.onRejected;\n        if (cb === null) {\n            (me._state ? deferred.resolve : deferred.reject)(me._value);\n            return;\n        }\n        try {\n            ret = cb(me._value);\n        }\n        catch ( /** @type {?} */e) {\n            deferred.reject(e);\n            return;\n        }\n        deferred.resolve(ret);\n    });\n}\n/**\n * @return {?}\n */\nfunction finale() {\n    var /** @type {?} */ i, /** @type {?} */ len;\n    /*jslint plusplus:true */\n    for (i = 0, len = this._deferreds.length; i < len; i++) {\n        handle.call(this, this._deferreds[i]);\n    }\n    this._deferreds = null;\n}\n/**\n * @param {?} newValue\n * @return {?}\n */\nfunction reject(newValue) {\n    this._state = false;\n    this._value = newValue;\n    finale.call(this);\n}\n/**\n * @param {?} newValue\n * @return {?}\n */\nfunction resolve(newValue) {\n    try { //Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n        if (newValue === this) {\n            throw new TypeError('A promise cannot be resolved with itself.');\n        }\n        if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {\n            var /** @type {?} */ then = newValue.then;\n            if (typeof then === 'function') {\n                doResolve(bind(then, newValue), bind(resolve, this), bind(reject, this));\n                return;\n            }\n        }\n        this._state = true;\n        this._value = newValue;\n        finale.call(this);\n    } catch ( /** @type {?} */e) { reject.call(this, e); }\n}\n/**\n * Defines a dummy promise, which simulates the behavior of a normal Promise\n * but is suitable used in synchronous call.\n * This resulted object is also a jQuery deferred object, therefore,\n * it will be resolved by the jQuery deferred object if it is a resolved value in\n * the jQuery deferred object.\n * @template T\n * @param {?} fn\n * @return {?}\n */\nexport function DummyPromise<T>(fn: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?) => void) => void) {\n    if (typeof this !== 'object') {\n        throw new TypeError('Promises must be constructed via new');\n    }\n    if (typeof fn !== 'function') {\n        throw new TypeError('not a function');\n    }\n    this._state = null;\n    this._value = null;\n    this._deferreds = [];\n\n    doResolve(fn, bind(resolve, this), bind(reject, this));\n}\n/**\n * @param {?} onFulfilled\n * @param {?} onRejected\n * @param {?} resolve\n * @param {?} reject\n * @return {?}\n */\nfunction Handler(onFulfilled, onRejected, resolve, reject) {\n    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n    this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n    this.resolve = resolve;\n    this.reject = reject;\n}\n\n\nDummyPromise.prototype['catch'] = function(onRejected) {\n    return this.then(null, onRejected);\n};\n\nDummyPromise.prototype.then = function(onFulfilled, onRejected) {\n    const /** @type {?} */ me = this;\n    return new DummyPromise(function(resolve, reject) {\n        handle.call(me, new Handler(onFulfilled, onRejected, resolve, reject));\n    });\n};\n\nDummyPromise.prototype.all = function(arrayArg) {\n    var /** @type {?} */ args = Array.prototype.slice.call(arguments.length === 1 && isArray(arrayArg) ? arrayArg : arguments);\n\n    return new DummyPromise(function(resolve, reject) {\n        if (args.length === 0) {\n            return resolve([]);\n        }\n        var /** @type {?} */ remaining = args.length, /** @type {?} */ i;\n/**\n * @param {?} i\n * @param {?} val\n * @return {?}\n */\nfunction res(i, val) {\n            try {\n                if (val && (typeof val === 'object' || typeof val === 'function')) {\n                    var /** @type {?} */ then = val.then;\n                    if (typeof then === 'function') {\n                        then.call(val, function(val) { res(i, val); }, reject);\n                        return;\n                    }\n                }\n                args[i] = val;\n\n                /*jslint plusplus: true */\n                if (--remaining === 0) {\n                    resolve(args);\n                }\n            } catch ( /** @type {?} */ex) {\n                reject(ex);\n            }\n        }\n        /*jslint plusplus: true */         for (i = 0; i < args.length; i++) {\n            res(i, args[i]);\n        }\n    });\n};\n\nDummyPromise.prototype.resolve = function(value) {\n    if (value && typeof value === 'object' && value.constructor === DummyPromise) {\n        return value;\n    }\n\n    return new DummyPromise(function(resolve) {\n        resolve(value);\n    });\n};\n\nDummyPromise.prototype.reject = function(value) {\n    /*jslint unparam: true */\n    return new DummyPromise(function(resolve, reject) {\n        reject(value);\n    });\n};\n\nDummyPromise.prototype.race = function(values) {\n    return new DummyPromise(function(resolve, reject) {\n        var /** @type {?} */ i, /** @type {?} */ len;\n        /*jslint plusplus: true */\n        for (i = 0, len = values.length; i < len; i++) {\n            values[i].then(resolve, reject);\n        }\n    });\n};\n\nDummyPromise.prototype.always = function(onFulfilled) {\n    return this.then(onFulfilled, onFulfilled);\n};\n\nDummyPromise.prototype.done = function(onFulfilled) {\n    return this.then(onFulfilled);\n};\n\nDummyPromise.prototype.fail = function(onRejected) {\n    return this.then(null, onRejected);\n};\n\nDummyPromise.prototype.promise = function() {\n    return this;\n};\n\nDummyPromise.prototype.progress = function() {\n    return this;\n};\n","// \r\n// Author:: Tom Tang <principleware@gmail.com>\r\n// Copyright:: Copyright (c) 2017, Tom Tang\r\n// \r\n// Permission is hereby granted, free of charge, to any person obtaining\r\n// a copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to\r\n// permit persons to whom the Software is furnished to do so, subject to\r\n// the following conditions:\r\n// \r\n// The above copyright notice and this permission notice shall be\r\n// included in all copies or substantial portions of the Software.\r\n// \r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n// \r\n// Except as contained in this notice, the name(s) of the above copyright\r\n// holders shall not be used in advertising or otherwise to promote the\r\n// sale, use or other dealings in this Software without prior written\r\n// authorization.\r\n\r\n\r\n\nimport { DummyPromise } from './promise-like';\r\nimport * as typeChecker from '../typing/type-checker';\n/**\n * Lifts a single value or a function into a Promise-like object.\rProvides a method of wrapping a single value or a function  into a Promise,\rin order that the following operation \rmay conform to the standard Promise operation.\rIn some scenario, we may first attempt to get a value from cache.\rMotivation.\rIn this case, we need to return a value. However, if the value is\rnot available in the cache, we may have to go ahead to load it\rasynchronously. Loading a value asynchronously usually returns\ra Promise. To untify the return from two cases, we\rescalate a single value into a Promise.\n * @template T\n * @param {?} value\n * @param {?} thisArg\n * @return {?}\n */\nexport function lift<T>(value: T, thisArg: Object): PromiseLike<T> {\r\n    /*jslint unparam: true */\r\n    return new DummyPromise(function(resolve, reject) {\r\n        if (typeChecker.isFunction(value)) {\r\n            const /** @type {?} */ restArgs = [];\r\n            /*jslint plusplus: true */\r\n            for (let /** @type {?} */ i = 2; i < arguments.length; i++) {\r\n                restArgs.push(arguments[i]);\r\n            }\r\n            const /** @type {?} */ ret = value.apply(thisArg || null, restArgs);\r\n            resolve(ret);\r\n        } else {\r\n            resolve(value);\r\n        }\r\n    });\r\n}\n/**\n * Lifts a value into an rejected state.\n * @template T\n * @param {?} value\n * @return {?}\n */\nexport function liftIntoReject<T>(value: T): PromiseLike<T> {\r\n    return new DummyPromise(function(resolve, reject) {\r\n        /*jslint unparam: true */\r\n        reject(value);\r\n    });\r\n}\n/**\n * Converts a given promise into another promise which ensures that\rthe given guard evalutes to be true from the state of the given promise.\n * @template T\n * @param {?} promise\n * @param {?} guard\n * @return {?}\n */\nexport function liftWithGuard<T>(promise: PromiseLike<T>, guard: (x: T) => boolean): PromiseLike<T> {\r\n    return promise.then(function(data) {\r\n        return new DummyPromise(function(resolve, reject) {\r\n            if (guard(data)) {\r\n                resolve(data);\r\n            } else {\r\n                reject(data);\r\n            }\r\n        });\r\n    });\r\n}\n/**\n * Settles a promise.\n * @template T\n * @param {?} promise\n * @return {?}\n */\nexport function settle<T>(promise: PromiseLike<T>): PromiseLike<T> {\r\n    return new DummyPromise(function(resolve) {\r\n        promise.then(function(value) {\r\n            resolve({\r\n                state: 'fulfilled',\r\n                data: value\r\n            });\r\n        }, function() {\r\n            resolve({\r\n                state: 'rejected'\r\n            });\r\n        });\r\n    });\r\n}\n/**\n * Converts the given promise into a promise which does not reject anything.\n * @template T\n * @param {?} promise\n * @param {?} guard\n * @return {?}\n */\nexport function liftToPredicate<T>(promise: PromiseLike<T>, guard: (x: T) => boolean): PromiseLike<boolean> {\r\n    return new DummyPromise(function(resolve, reject) {\r\n        /*jslint unparam: true */\r\n        promise.then(function(data) {\r\n            resolve(guard(data));\r\n        }, function() {\r\n            resolve(false);\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport interface IPipelineSettings<U> {\r\n    validator?: (x) => boolean,\r\n    adaptor: (x) => U\r\n}\n/**\n * Transforms a given promise with additonal pipeline processing.\rSpecifically, in this method, compared to the given promise, the return\rpromise contains validating and adpating stages.\n * @template T, U\n * @param {?} readerPromise\n * @param {?} settings\n * @return {?}\n */\nexport function readerPipeline<T, U>(readerPromise: PromiseLike<T>, settings: IPipelineSettings<U>) {\r\n    return readerPromise\r\n        .then(function(data) {\r\n            if (settings.validator) {\r\n                if (!settings.validator(data)) {\r\n                    throw new Error('Data is not valid: ' + data);\r\n                }\r\n            }\r\n            return data;\r\n        })\r\n        .then(function(data) {\r\n            return settings.adaptor(data);\r\n        });\r\n}\n/**\n * Transforms a given promise into one promise with our own implementation.\n * @template T\n * @param {?} promise\n * @return {?}\n */\nexport function transform<T>(promise: PromiseLike<T>): PromiseLike<T> {\r\n    return new DummyPromise(function(resolve, reject) {\r\n        promise.then(resolve, reject);\r\n    });\r\n}\r\n","\n/**\n * @param {?} x\n * @return {?}\n */\nexport function isBoolean(x: any): x is boolean {\r\n    return typeof x === 'boolean';\r\n}\n/**\n * @param {?} x\n * @return {?}\n */\nexport function isNumber(x: any): x is number {\r\n    return typeof x === 'number';\r\n}\n/**\n * @param {?} x\n * @return {?}\n */\nexport function isString(x: any): x is string {\r\n    return typeof x === 'string';\r\n}\n/**\n * @param {?} x\n * @return {?}\n */\nexport function isSymbol(x: any): x is symbol {\r\n    return typeof x === 'symbol';\r\n}\n/**\n * @param {?} x\n * @return {?}\n */\nexport function isNull(x: any): x is null {\r\n    return x === null;\r\n}\n/**\n * @param {?} x\n * @return {?}\n */\nexport function isUndefined(x: any): x is undefined {\r\n    return x === undefined;\r\n}\n/**\n * @param {?} x\n * @return {?}\n */\nexport function isArray(x: any): x is Array<any> {\r\n    return x instanceof Array;\r\n}\n/**\n * @param {?} x\n * @return {?}\n */\nexport function isObject(x: any): x is Object {\r\n    return typeof x === 'object';\r\n}\n/**\n * @param {?} x\n * @return {?}\n */\nexport function isFunction(x: any): x is Function {\r\n    return typeof x === 'function';\r\n}\r\n\r\nexport interface ITypeDef {\r\n    name: string,\r\n    val: any,\r\n    pred: (any) => boolean\r\n};\r\n\r\nexport const /** @type {?} */ tyBool: ITypeDef = { name: 'Boolean', val: false, pred: isBoolean };\r\nexport const /** @type {?} */ tyNull: ITypeDef = { name: 'Null', val: null, pred: isNull };\r\nexport const /** @type {?} */ tyUndefined: ITypeDef = { name: 'Undefined', val: undefined, pred: isUndefined };\r\nexport const /** @type {?} */ tyNumber: ITypeDef = { name: 'Number', val: 0, pred: isNumber };\r\nexport const /** @type {?} */ tyString: ITypeDef = { name: 'String', val: '', pred: isString };\r\nexport const /** @type {?} */ tySymbol: ITypeDef = { name: 'Symbol', val: null, pred: isSymbol };\r\nexport const /** @type {?} */ tyObject: ITypeDef = { name: 'Object', val: function() { return {}; }, pred: isObject };\r\nexport const /** @type {?} */ tyArray: ITypeDef = { name: 'Array', val: function() { return []; }, pred: isArray };\r\nexport const /** @type {?} */ tyFunction: ITypeDef = { name: 'Function', val: function() { }, pred: isFunction };\n/**\n * @constant - Predefined types and their properties.\n */\nconst preDefinedTypes: { [key: string]: ITypeDef } = {\r\n    tyBool: tyBool,\r\n    tyNull: tyNull,\r\n    tyUndefined: tyUndefined,\r\n    tyNumber: tyNumber,\r\n    tyString: tyString,\r\n    tySymbol: tySymbol,\r\n    tyObject: tyObject,\r\n    tyArray: tyArray,\r\n    tyFunction: tyFunction\r\n};\n/**\n * Returns the default value for a given type.\n * @param {?} ty\n * @return {?}\n */\nexport function defaultValue(ty: ITypeDef): any {\r\n    let /** @type {?} */ val = ty.val;\r\n    if (ty !== tyFunction && typeof val === 'function') {\r\n        val = val();\r\n    }\r\n    return val;\r\n}\n/**\n * Type checks if a given value is type of the given ty\n * @param {?} value\n * @param {?} ty\n * @return {?}\n */\nexport function ok(value: any, ty: ITypeDef): boolean {\r\n    return ty.pred(value);\r\n}\n/**\n * Returns the type for the given value.\n * @param {?} value\n * @return {?}\n */\nexport function getType(value: any): ITypeDef {\r\n    for (let /** @type {?} */ prop in preDefinedTypes) {\r\n        if (ok(value, preDefinedTypes[prop])) {\r\n            return preDefinedTypes[prop];\r\n        }\r\n    }\r\n    return null;\r\n}\n/**\n * \\@function assert\n * @param {?} value\n * @param {?} ty\n * @return {?}\n */\nexport function assert(value: any, ty: ITypeDef): void {\r\n    if (ok(value, ty)) {\r\n        return;\r\n    }\r\n    throw new Error('type check error: exptected type is ' +\r\n        ty + ' but given type is ' + typeof value);\r\n}\r\n","\n/**\n * Replaces the placeholders a given format with the given parameters.\n * @param {?} format\n * @param {?} params\n * @return {?}\n */\nexport function replace(format: string, params: { [key: string]: any }): string {\r\n    /*jslint unparam: true */\r\n    return format.replace(/\\{([a-zA-Z]+)\\}/g, function(s, key) {\r\n        return (typeof params[key] === 'undefined') ? '' : params[key];\r\n    });\r\n}\n/**\n * Transforms the given string into one where\rsome characters have been properly replaced with\rtheir escape versions.\n * @param {?} data\n * @return {?}\n */\nexport function applyEscape(data: string): string {\r\n    data = data\r\n        .replace(/[\\\\]/g, '\\\\\\\\')\r\n        .replace(/[\\\"]/g, '\\\\\\\"')\r\n        .replace(/[\\/]/g, '\\\\/')\r\n        .replace(/[\\b]/g, '\\\\b')\r\n        .replace(/[\\f]/g, '\\\\f')\r\n        .replace(/[\\n]/g, '\\\\n')\r\n        .replace(/[\\r]/g, '\\\\r')\r\n        .replace(/[\\t]/g, '\\\\t');\r\n    return data;\r\n}\n/**\n * Undo the work by applyEscape. It replaces the escape\rcharacters with their unescaped ones.\n * @param {?} data\n * @return {?}\n */\nexport function reverseEscape(data: string): string {\r\n    data = data\r\n        .replace(/\\\\\\\\/g, '\\\\')\r\n        .replace(/\\\\\\\"/g, '\\\"')\r\n        .replace(/\\\\\\//g, '\\/')\r\n        .replace(/\\\\\\b/g, '\\b')\r\n        .replace(/\\\\\\f/g, '\\f')\r\n        .replace(/\\\\\\n/g, '\\n')\r\n        .replace(/\\\\\\r/g, '\\r')\r\n        .replace(/\\\\\\t/g, '\\t');\r\n    return data;\r\n}\r\n","/**\n * @fileOverview\n * Defines a Sqlite databse\n * @name SqliteDatabase.js\n * @module hypercom/storage/SqliteDatabase\n * @author Xiaolong Tang <xxlongtang@gmail.com>\n * @license Copyright @me\n */\n\n\nimport {\n    SQLite,\n    SQLiteDatabaseConfig,\n    SQLiteObject,\n    SQLiteTransaction\n} from '@ionic-native/sqlite';\nimport { replace, lift, makeArray } from 'principleware-fe-utilities/dist';\nimport { IDevicePlatform } from '../platform/interfaces';\n\nimport { ITableSchema, ISqliteDatabase } from './interfaces';\n\nconst /** @type {?} */ workingDbs: {\n    [key: string]: {\n        database: SQLiteObject,\n        referenceCounter: number\n    }\n} = {};\n/**\n * @param {?} name\n * @param {?} platform\n * @return {?}\n */\nfunction makeOptions(name: string, platform: IDevicePlatform): SQLiteDatabaseConfig {\n    const /** @type {?} */ options = { name: name };\n    if (platform.ios) {\n        options['iosDatabaseLocation'] = 'default';\n    } else if (platform.android) {\n        options['location'] = 'default';\n    }\n    return options;\n}\nexport class SqliteDatabase implements ISqliteDatabase {\n/**\n * @param {?} sqlite\n * @param {?} dbName\n * @param {?} dbSchema\n * @param {?} platform\n */\nconstructor(private sqlite: SQLite,\nprivate dbName: string,\nprivate dbSchema: { [key: string]: ITableSchema },\nprivate platform: IDevicePlatform) {\n    }\n/**\n * Inits a database.\n * @return {?}\n */\ninitDBPromise(): PromiseLike<any> {\n        const /** @type {?} */ cache = workingDbs[this.dbName];\n\n        if (cache) {\n            cache.referenceCounter = cache.referenceCounter + 1;\n            return lift(cache.database, null);\n        }\n\n        const /** @type {?} */ options = makeOptions(this.dbName, this.platform);\n        return this.sqlite.create(options)\n            .then(db => {\n\n                const /** @type {?} */ tables = [];\n                for (let /** @type {?} */ k in this.dbSchema) {\n                    if (this.dbSchema.hasOwnProperty(k)) {\n                        const /** @type {?} */ v = this.dbSchema[k];\n                        tables.push(v.create);\n                    }\n                }\n\n                const /** @type {?} */ promises = tables.map((elem) => {\n                    return db.executeSql(elem, {});\n                });\n\n                return Promise.all(promises)\n                    .then(() => {\n                        workingDbs[this.dbName] = {\n                            referenceCounter: 1,\n                            database: db\n                        };\n\n                        return db;\n                    });\n            })\n            .catch(e => console.log(e));\n    }\n/**\n * @return {?}\n */\ndeleteDBPromise(): PromiseLike<any> {\n        let /** @type {?} */ cache = workingDbs[this.dbName];\n\n        if (cache) {\n            throw new Error('Still in use, please close first');\n        }\n\n        const /** @type {?} */ options = makeOptions(this.dbName, this.platform);\n\n        return this.sqlite.deleteDatabase(options);\n    }\n/**\n * Closes the database.\n * @return {?}\n */\ncloseDBPromise(): PromiseLike<any> {\n\n        const /** @type {?} */ cache = workingDbs[this.dbName];\n\n        if (!cache) {\n            return lift(true, null);\n        }\n\n        cache.referenceCounter = cache.referenceCounter - 1;\n        if (cache.referenceCounter > 0) {\n            return lift(true, null);\n        }\n\n        return cache.database.close();\n    }\n/**\n * Inserts data into the given table.\n * @param {?} table\n * @param {?} data\n * @return {?}\n */\ninsertPromise(table: string, data: any): PromiseLike<number> {\n\n        const /** @type {?} */ schema = this.dbSchema[table];\n        const /** @type {?} */ cache = workingDbs[this.dbName];\n\n        if (!cache || !schema) {\n            throw new Error('No database instance');\n        }\n\n        return cache.database.executeSql(schema.insert, data)\n            .then((result) => {\n                return result;\n            })\n            .catch((e) => {\n                console.log(e);\n                return 0;\n            });\n    }\n/**\n * Selects from the given table.\n * @param {?} table\n * @param {?=} selectSql\n * @return {?}\n */\nselectPromise(table: string, selectSql?: string): PromiseLike<any[]> {\n\n        const /** @type {?} */ schema = this.dbSchema[table];\n        const /** @type {?} */ cache = workingDbs[this.dbName];\n\n        if (!cache || !schema) {\n            throw new Error('No database instance');\n        }\n\n        return cache.database.executeSql(selectSql || schema.select, {})\n            .then((result) => {\n                const /** @type {?} */ records = [];\n                for (let /** @type {?} */ i = 0; i < result.rows.length; i++) {\n                    records.push(result.rows.item(i));\n                }\n                return records;\n            })\n            .catch((e) => {\n                console.log(e);\n                return [];\n            });\n    }\n/**\n * Deletes records with the given id or range\n * @param {?} table\n * @param {?} id\n * @param {?=} lastId\n * @return {?}\n */\ndeletePromise(table: string, id: number, lastId?: number): PromiseLike<any> {\n\n        const /** @type {?} */ schema = this.dbSchema[table];\n        const /** @type {?} */ cache = workingDbs[this.dbName];\n\n        if (!cache || !schema) {\n            throw new Error('No database instance');\n        }\n\n        let /** @type {?} */ where = '';\n        if (lastId) {\n            where = 'WHERE id > ' + id + ' AND id < ' + lastId;\n        } else {\n            where = id === 0 ? 'WHERE id > 0' : 'WHERE id=' + id;\n        }\n\n        const /** @type {?} */ stmt = replace(schema.remove, { where: where });\n\n        return cache.database.executeSql(stmt, {});\n    }\n/**\n * Deletes records with the given where condition\n * @param {?} table\n * @param {?} where\n * @return {?}\n */\ndeleteWherePromise(table: string, where: string): PromiseLike<any> {\n\n        const /** @type {?} */ schema = this.dbSchema[table];\n        const /** @type {?} */ cache = workingDbs[this.dbName];\n\n        if (!cache || !schema) {\n            throw new Error('No database instance');\n        }\n\n        const /** @type {?} */ stmt = replace(schema.remove, { where: where });\n\n        return cache.database.executeSql(stmt, {});\n    }\n/**\n * Updates the given with the given value.\n * @param {?} table\n * @param {?} value\n * @param {?=} where\n * @return {?}\n */\nupdatePromise(table: string, value: any, where: string = ''): PromiseLike<any> {\n\n        const /** @type {?} */ schema = this.dbSchema[table];\n        const /** @type {?} */ cache = workingDbs[this.dbName];\n\n        if (!cache || !schema) {\n            throw new Error('No database instance');\n        }\n\n        const /** @type {?} */ stmt = 'UPDATE ' + table + ' SET ' + value + ' ' + where;\n\n        return cache.database.executeSql(stmt, {});\n    }\n}\n\nfunction SqliteDatabase_tsickle_Closure_declarations() {\n/** @type {?} */\nSqliteDatabase.prototype.sqlite;\n/** @type {?} */\nSqliteDatabase.prototype.dbName;\n/** @type {?} */\nSqliteDatabase.prototype.dbSchema;\n/** @type {?} */\nSqliteDatabase.prototype.platform;\n}\n\n","/**\n * @fileOverview\n * Defines a class for representing the key-pair table.\n */\n\n\nimport { lift as liftIntoPromise } from 'principleware-fe-utilities/dist';\n\nimport { SqliteDatabase } from './sqlite-database';\n\nimport { IMapKeyConfiguration, ISqliteDatabase } from './interfaces';\n\nexport interface IKeyCache {\n    get(k: string): any;\n    set(k: string, v: any, liveSession: number);\n    reset(): void;\n}\n\nexport interface IMapRecord {\n    key: string;\n    value: any;\n    id: number;\n}\n\nconst /** @type {?} */ DefaultLiveSession = 2 * 60;\n/**\n * \\@class KeyPairTable\n */\nexport class MapTable {\n/**\n * @param {?} tableName\n * @param {?} configuration\n * @param {?} database\n * @param {?} _cache\n */\nconstructor(protected tableName: string,\n        protected configuration: { [key: string]: IMapKeyConfiguration },\n        protected database: ISqliteDatabase,\nprivate _cache: IKeyCache) { }\n/**\n * Inserts the given value for the given key.\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\ninsertP(key: string, value: any): PromiseLike<IMapRecord> {\n        // parse into value \n        value = this.configuration[key].parser.call(null, value);\n        const /** @type {?} */ ret = this.database.insertPromise(this.tableName, [key, value]);\n        return ret.then(function(insertId) {\n            const /** @type {?} */ record = {\n                key: key,\n                value: value,\n                id: insertId\n            };\n            if (this.cache) {\n                const /** @type {?} */ cacheKey = this.configuration[key].cacheKey;\n                this._cache.set(cacheKey, record, DefaultLiveSession);\n            }\n            return record;\n        });\n    }\n/**\n * Updtes the given reocrd; the record value has been updated.\n * @param {?} record\n * @param {?} newValue\n * @return {?}\n */\nupdateP(record: IMapRecord, newValue: any): PromiseLike<IMapRecord> {\n\n        newValue = this.configuration[record.key].parser.call(null, newValue);\n\n        if (record.id === 0) {\n            return this.insertP(record.key, newValue);\n        }\n\n        const /** @type {?} */ ret = this.database.updatePromise(this.tableName, 'value = ' +\n            (typeof newValue === 'string' ? '\"' + newValue + '\"' : newValue),\n            'WHERE id = ' + record.id);\n\n        return ret.then(function() {\n            if (this._cache) {\n                const /** @type {?} */ cacheKey = this.configuration[record.key].cacheKey;\n                record.value = newValue;\n                this._cache.set(cacheKey, record, DefaultLiveSession);\n            }\n            return record;\n        });\n    }\n/**\n * Returns the infomation about the given key.\n * @param {?} key\n * @return {?}\n */\ngetP(key: string): PromiseLike<IMapRecord> {\n\n        if (this._cache) {\n            const /** @type {?} */ cachedItem = this._cache.get(this.configuration[key].cacheKey);\n            if (cachedItem) {\n                return liftIntoPromise(cachedItem, null);\n            }\n        }\n\n        const /** @type {?} */ stmt = 'SELECT * FROM ' + this.tableName + ' WHERE key like \"' + key + '\"';\n        const /** @type {?} */ ret = this.database.selectPromise(this.tableName, stmt);\n\n        return ret.then(function(records) {\n            let /** @type {?} */ record: IMapRecord;\n            if (records.length > 0) {\n                record = {\n                    key: key,\n                    value: records[0],\n                    id: records[0].id\n                }\n                if (this.configuration[key].reader) {\n                    record.value = this.configuration[key].reader.call(null, record.value);\n                }\n            } else {\n                record = {\n                    key: key,\n                    value: this.configuration[key].defaultValue,\n                    id: 0\n                };\n            }\n            if (this._cache) {\n                const /** @type {?} */ cacheKey = this.configuration[key].cacheKey;\n                this._cache.set(cacheKey, record, DefaultLiveSession);\n            }\n            return record;\n        });\n    }\n/**\n * Cleans all database record.\n * @return {?}\n */\nresetP(): PromiseLike<any> {\n        // clean all cache first\n        if (this._cache) {\n            this._cache.reset();\n        }\n        return this.database.deletePromise(this.tableName, 0);\n    }\n}\n\nfunction MapTable_tsickle_Closure_declarations() {\n/** @type {?} */\nMapTable.prototype.tableName;\n/** @type {?} */\nMapTable.prototype.configuration;\n/** @type {?} */\nMapTable.prototype.database;\n/** @type {?} */\nMapTable.prototype._cache;\n}\n\n"],"names":["fn","thisArg","apply","arguments","isArray","Array","value","Object","prototype","toString","call","onFulfilled","onRejected","done","reason","ex","deferred","me","this","_state","setTimeout","cb","ret","_value","e","reject","resolve","_deferreds","push","i","len","length","handle","newValue","finale","TypeError","then","doResolve","bind","DummyPromise","all","arrayArg","args","slice","remaining","val","res","constructor","race","values","always","fail","promise","progress","restArgs","format","params","replace","s","key","workingDbs","name","platform","options","ios","android","sqlite","dbName","dbSchema","SqliteDatabase","cache","referenceCounter","lift","database","makeOptions","create","db","tables","k","_this","hasOwnProperty","v","promises","map","elem","executeSql","Promise","catch","console","log","Error","deleteDatabase","close","table","data","schema","insert","result","selectSql","select","records","rows","item","id","lastId","where","stmt","remove","tableName","configuration","_cache","MapTable","parser","insertPromise","insertId","record","cacheKey","set","insertP","updatePromise","cachedItem","get","liftIntoPromise","selectPromise","reader","defaultValue","reset","deletePromise"],"mappings":"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"}